{"version":3,"file":"static/webpack/static/development/pages/elevators.js.438039bb4e56d175f01b.hot-update.js","sources":["webpack:///./components/elevator-page/elevator-system.tsx"],"sourcesContent":["import React from \"react\";\nimport Elevator from '../elevator-page/elevator';\nimport {ElevatorProps, ElevatorDirection} from '../elevator-page/elevator-types';\nimport { number } from \"prop-types\";\n\ninterface User {\n    origin: number;\n    inElevator?: string;\n    onFloor?: number;\n    destination: number;\n    direction?: ElevatorDirection;\n}\n\ninterface ElevatorSystemState {\n    elevators: ElevatorProps[];\n    users: User[];\n    totalFloors: number;\n}\n\nclass ElevatorSystem extends React.Component<{}, ElevatorSystemState> {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            elevators: [\n                {floor: 1, direction: ElevatorDirection.Up, stops: [], el_id: 'A'},\n                {floor: 5, direction: ElevatorDirection.Down, stops: [], el_id: 'B'}\n            ],\n            users: this.createNewUsers(10, 8),\n            totalFloors: 8\n        }\n    }\n\n    createNewUsers(n, totalFloors) {\n        let newUsers = [];\n\n        for (let i = 0; i < n; i++) {\n            const origin = Math.floor(Math.random() * totalFloors) + 1;\n            const destination = Math.floor(Math.random() * totalFloors) + 1;\n\n            const newUser = {\n                origin,\n                onFloor: origin,\n                destination,\n                direction: destination - origin > 0 ? ElevatorDirection.Up : ElevatorDirection.Down,\n            }\n\n            newUsers.push(newUser)\n        }\n\n        return newUsers;\n    }\n\n    userCleanup = () => {\n        const {users} = this.state;\n\n        return users.filter(u => u.destination !== u.onFloor);\n    }\n\n    elevatorStep = () => {\n        let {elevators, users, totalFloors} = this.state;\n        users = this.userCleanup();\n\n        elevators.forEach(el => {\n            // MOVEMENT\n            // if at top or bottom, turn around\n            if(el.floor === totalFloors) {\n                el.direction = ElevatorDirection.Down;\n            }\n            if(el.floor === 1) {\n                el.direction = ElevatorDirection.Up;\n            }\n\n            // let on users\n            users.forEach(u => {\n                if (u.onFloor === el.floor && el.direction === u.direction) {\n                    // let riders on\n                    u.onFloor = null;\n                    u.inElevator = el.el_id;\n                }\n            });\n            \n            // take next step\n            el.floor = el.direction === ElevatorDirection.Up ? el.floor + 1 : el.floor - 1;\n\n            // let off users\n            users.forEach(u => {\n                if (u.inElevator === el.el_id && el.floor === u.destination) {\n                    //let riders off\n                    u.inElevator = null;\n                    u.onFloor = u.destination;\n                    u.direction = null;\n                }\n            });\n        });\n\n        this.setState({\n            elevators,\n            users\n        });\n    }\n\n    render() {\n        const {elevators, users, totalFloors} = this.state;\n        const elevatorShaftStyles = {height: `${100 *totalFloors}px`};\n        const floors = new Array(totalFloors).fill(0).map((el, i) => totalFloors - i);\n\n        const peopleInElevators = users.filter(u => u.inElevator);\n        const peopleWaiting = users.filter(u => u.onFloor);\n\n        return (<div className='elevator-system'>\n            <button onClick={this.elevatorStep}>Run Elevator</button>\n            <div className=\"elevator-system__graphic\">\n                <div className=\"elevator-system__elevators\">\n                    {elevators.map(el => \n                        <div className=\"elevator__shaft\" key={el.el_id} style={elevatorShaftStyles}>\n                            <Elevator {...el} el_id={el.el_id}>\n                                {peopleInElevators\n                                    .filter(p => p.inElevator === el.el_id)\n                                    .map(p => \n                                        <div className=\"elevator__rider\">\n                                            {`${p.origin}\\u21e2${p.destination}`}\n                                        </div>)}\n                            </Elevator>\n                        </div>\n                    )}\n                </div>\n                <div className=\"elevator-system__floors\" style={elevatorShaftStyles}>\n                    {floors.map((floor, i) => \n                        <div className=\"elevator-system__floor\">\n                            <div className=\"elevator-system__floor-number\">{floor}</div>\n                            {peopleWaiting\n                            .filter(p => p.onFloor === floor)\n                            .map(p => \n                                <div className=\"elevator__rider\">\n                                    {`${p.origin}\\u21e2${p.destination}`}\n                                </div>)}                       \n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>)\n    }\n}\n\nexport default ElevatorSystem;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAgBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiCA;AAGA;AAAA;AAAA;AACA;AACA;AAtCA;AAuCA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA9EA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AANA;AAHA;AAWA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;;;AAmDA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AALA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AALA;AAcA;;;;AA3HA;AACA;AA6HA;;;;A","sourceRoot":""}