{"ast":null,"code":"import _Number$isInteger from \"@babel/runtime-corejs2/core-js/number/is-integer\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/cassiemorford/Desktop/cassieM/components/calculator-page/calculator.tsx\";\nimport React from \"react\";\nimport CalculatorKey from './calculator-key';\nimport \"../../scss/main.scss\";\nvar numbers = \"1234567890\".split(\"\");\nvar operations = \"+-*/\".split(\"\");\nvar specialOperations = [\"CLR\", \"=\"];\n\nvar CalculatorComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalculatorComponent, _React$Component);\n\n  function CalculatorComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CalculatorComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalculatorComponent).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateNewTotal\", function () {\n      var _this$state = _this.state,\n          total = _this$state.total,\n          display = _this$state.display,\n          pendingOperation = _this$state.pendingOperation;\n      console.log(\"\".concat(total).concat(pendingOperation).concat(display));\n      return eval(\"\".concat(total).concat(pendingOperation).concat(display));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearHistory\", function () {\n      var maintainDisplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var newDisplay = 0;\n\n      if (maintainDisplay) {\n        newDisplay = _this.calculateNewTotal();\n      }\n\n      _this.setState({\n        display: newDisplay,\n        pendingOperation: \"+\",\n        total: 0,\n        continueInput: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function (key) {\n      var _this$state2 = _this.state,\n          total = _this$state2.total,\n          display = _this$state2.display,\n          pendingOperation = _this$state2.pendingOperation,\n          continueInput = _this$state2.continueInput;\n\n      if (_Number$isInteger(+key)) {\n        var newDisplay = continueInput ? display + key : key;\n\n        _this.setState({\n          display: +newDisplay,\n          continueInput: true\n        });\n      } else if (specialOperations.includes(key)) {\n        _this.clearHistory(key === '=');\n      } else {\n        var newTotal = _this.calculateNewTotal();\n\n        _this.setState({\n          display: newTotal,\n          pendingOperation: key,\n          total: newTotal,\n          continueInput: false\n        });\n      }\n    });\n\n    _this.state = {\n      display: 0,\n      total: 0,\n      pendingOperation: \"+\",\n      continueInput: true\n    };\n    return _this;\n  }\n\n  _createClass(CalculatorComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var display = this.state.display;\n      return React.createElement(\"div\", {\n        className: \"calculator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"calculator__display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, display.toString().slice(0, 10)), React.createElement(\"div\", {\n        className: \"calculator__main-keys\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"calculator__number-keys\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, numbers.map(function (number) {\n        return React.createElement(CalculatorKey, {\n          symbol: number,\n          keyPressHandler: _this2.handleKeyPress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"calculator__operation-keys\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, operations.map(function (symbol) {\n        return React.createElement(CalculatorKey, {\n          symbol: symbol,\n          keyPressHandler: _this2.handleKeyPress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      }))), React.createElement(\"div\", {\n        className: \"calculator__special-keys\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, specialOperations.map(function (symbol) {\n        return React.createElement(CalculatorKey, {\n          symbol: symbol,\n          keyPressHandler: _this2.handleKeyPress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        });\n      })), \" \");\n    }\n  }]);\n\n  return CalculatorComponent;\n}(React.Component);\n\nexport default CalculatorComponent;","map":{"version":3,"sources":["/Users/cassiemorford/Desktop/cassieM/components/calculator-page/calculator.tsx"],"names":["React","CalculatorKey","numbers","split","operations","specialOperations","CalculatorComponent","props","state","total","display","pendingOperation","console","log","eval","maintainDisplay","newDisplay","calculateNewTotal","setState","continueInput","key","includes","clearHistory","newTotal","toString","slice","map","number","handleKeyPress","symbol","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport CalculatorKey from './calculator-key'\nimport \"../../scss/main.scss\";\n\nconst numbers = \"1234567890\".split(\"\");\nconst operations = \"+-*/\".split(\"\");\nconst specialOperations = [\"CLR\", \"=\"];\n\ninterface CalculatorState {\n    display: number;\n    total: number;\n    pendingOperation: string;\n    continueInput: boolean;\n}\n\nclass CalculatorComponent extends React.Component<{}, CalculatorState> {\n    constructor(props) {\n      super(props);\n      this.state = {\n        display: 0,\n        total: 0,\n        pendingOperation: \"+\",\n        continueInput: true\n      };\n    }\n    \n    calculateNewTotal = () => {\n      const { total, display, pendingOperation } = this.state;\n      console.log(`${total}${pendingOperation}${display}`)\n      return eval(`${total}${pendingOperation}${display}`);\n    }\n  \n    clearHistory = (maintainDisplay = false) => {\n      let newDisplay = 0;\n      if (maintainDisplay) {\n        newDisplay = this.calculateNewTotal();\n      }\n      \n      this.setState({\n        display: newDisplay,\n        pendingOperation: \"+\",\n        total: 0,\n        continueInput: false\n      });\n    };\n  \n    handleKeyPress = key => {\n      const { total, display, pendingOperation, continueInput } = this.state;\n  \n      if (Number.isInteger(+key)) {\n        const newDisplay = continueInput ? display + key : key;\n        this.setState({\n          display: +newDisplay,\n          continueInput: true\n        });\n      } else if (specialOperations.includes(key)) {\n        this.clearHistory(key === '=');\n      } else {\n        const newTotal = this.calculateNewTotal();\n        this.setState({\n          display: newTotal,\n          pendingOperation: key,\n          total: newTotal,\n          continueInput: false\n        });\n      }\n    };\n  \n    render() {\n      const { display } = this.state;\n  \n      return (\n        <div className=\"calculator\">\n          <div className=\"calculator__display\">{display.toString().slice(0,10)}</div>\n          <div className=\"calculator__main-keys\">\n            <div className=\"calculator__number-keys\">\n              {numbers.map(number => (\n                <CalculatorKey symbol={number} keyPressHandler={this.handleKeyPress} />\n              ))}\n            </div>\n            <div className=\"calculator__operation-keys\">\n              {operations.map(symbol => (\n                <CalculatorKey symbol={symbol} keyPressHandler={this.handleKeyPress} />\n              ))}\n            </div>\n          </div>\n          <div className=\"calculator__special-keys\">\n            {specialOperations.map(symbol => (\n              <CalculatorKey symbol={symbol} keyPressHandler={this.handleKeyPress} />\n            ))}\n          </div>{\" \"}\n        </div>\n      );\n    }\n  }\n\nexport default CalculatorComponent;\n"]},"metadata":{},"sourceType":"module"}